{"remainingRequest":"C:\\Users\\multicampus\\Desktop\\tmp2\\s03p13b201\\frontend\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\multicampus\\Desktop\\tmp2\\s03p13b201\\frontend\\node_modules\\vuetify\\lib\\services\\lang\\index.js","dependencies":[{"path":"C:\\Users\\multicampus\\Desktop\\tmp2\\s03p13b201\\frontend\\node_modules\\vuetify\\lib\\services\\lang\\index.js","mtime":1596434779670},{"path":"C:\\Users\\multicampus\\Desktop\\tmp2\\s03p13b201\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1596434773157},{"path":"C:\\Users\\multicampus\\Desktop\\tmp2\\s03p13b201\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":1596434772908}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:ZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gInN5bWJvbCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfQoKZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gImZ1bmN0aW9uIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfQoKZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH0KCmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9CgpmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSAib2JqZWN0IiB8fCB0eXBlb2YgY2FsbCA9PT0gImZ1bmN0aW9uIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH0KCmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcigidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkIik7IH0gcmV0dXJuIHNlbGY7IH0KCmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gInVuZGVmaW5lZCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09ICJmdW5jdGlvbiIpIHJldHVybiB0cnVlOyB0cnkgeyBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfQoKZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfQoKLy8gRXh0ZW5zaW9ucwppbXBvcnQgeyBTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZSc7IC8vIFV0aWxpdGllcwoKaW1wb3J0IHsgZ2V0T2JqZWN0VmFsdWVCeVBhdGggfSBmcm9tICcuLi8uLi91dGlsL2hlbHBlcnMnOwppbXBvcnQgeyBjb25zb2xlRXJyb3IsIGNvbnNvbGVXYXJuIH0gZnJvbSAnLi4vLi4vdXRpbC9jb25zb2xlJzsKdmFyIExBTkdfUFJFRklYID0gJyR2dWV0aWZ5Lic7CnZhciBmYWxsYmFjayA9IFN5bWJvbCgnTGFuZyBmYWxsYmFjaycpOwoKZnVuY3Rpb24gZ2V0VHJhbnNsYXRpb24obG9jYWxlLCBrZXkpIHsKICB2YXIgdXNpbmdEZWZhdWx0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBmYWxzZTsKICB2YXIgZGVmYXVsdExvY2FsZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAzID8gYXJndW1lbnRzWzNdIDogdW5kZWZpbmVkOwogIHZhciBzaG9ydEtleSA9IGtleS5yZXBsYWNlKExBTkdfUFJFRklYLCAnJyk7CiAgdmFyIHRyYW5zbGF0aW9uID0gZ2V0T2JqZWN0VmFsdWVCeVBhdGgobG9jYWxlLCBzaG9ydEtleSwgZmFsbGJhY2spOwoKICBpZiAodHJhbnNsYXRpb24gPT09IGZhbGxiYWNrKSB7CiAgICBpZiAodXNpbmdEZWZhdWx0KSB7CiAgICAgIGNvbnNvbGVFcnJvcigiVHJhbnNsYXRpb24ga2V5IFwiIi5jb25jYXQoc2hvcnRLZXksICJcIiBub3QgZm91bmQgaW4gZmFsbGJhY2siKSk7CiAgICAgIHRyYW5zbGF0aW9uID0ga2V5OwogICAgfSBlbHNlIHsKICAgICAgY29uc29sZVdhcm4oIlRyYW5zbGF0aW9uIGtleSBcIiIuY29uY2F0KHNob3J0S2V5LCAiXCIgbm90IGZvdW5kLCBmYWxsaW5nIGJhY2sgdG8gZGVmYXVsdCIpKTsKICAgICAgdHJhbnNsYXRpb24gPSBnZXRUcmFuc2xhdGlvbihkZWZhdWx0TG9jYWxlLCBrZXksIHRydWUsIGRlZmF1bHRMb2NhbGUpOwogICAgfQogIH0KCiAgcmV0dXJuIHRyYW5zbGF0aW9uOwp9CgpleHBvcnQgdmFyIExhbmcgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9TZXJ2aWNlKSB7CiAgX2luaGVyaXRzKExhbmcsIF9TZXJ2aWNlKTsKCiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihMYW5nKTsKCiAgZnVuY3Rpb24gTGFuZyhwcmVzZXQpIHsKICAgIHZhciBfdGhpczsKCiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTGFuZyk7CgogICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKTsKICAgIF90aGlzLmRlZmF1bHRMb2NhbGUgPSAnZW4nOwogICAgdmFyIF9wcmVzZXQkTGFuZyRwcm9wZXJ0eSA9IHByZXNldFtMYW5nLnByb3BlcnR5XSwKICAgICAgICBjdXJyZW50ID0gX3ByZXNldCRMYW5nJHByb3BlcnR5LmN1cnJlbnQsCiAgICAgICAgbG9jYWxlcyA9IF9wcmVzZXQkTGFuZyRwcm9wZXJ0eS5sb2NhbGVzLAogICAgICAgIHQgPSBfcHJlc2V0JExhbmckcHJvcGVydHkudDsKICAgIF90aGlzLmN1cnJlbnQgPSBjdXJyZW50OwogICAgX3RoaXMubG9jYWxlcyA9IGxvY2FsZXM7CiAgICBfdGhpcy50cmFuc2xhdG9yID0gdCB8fCBfdGhpcy5kZWZhdWx0VHJhbnNsYXRvcjsKICAgIHJldHVybiBfdGhpczsKICB9CgogIF9jcmVhdGVDbGFzcyhMYW5nLCBbewogICAga2V5OiAiY3VycmVudExvY2FsZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gY3VycmVudExvY2FsZShrZXkpIHsKICAgICAgdmFyIHRyYW5zbGF0aW9uID0gdGhpcy5sb2NhbGVzW3RoaXMuY3VycmVudF07CiAgICAgIHZhciBkZWZhdWx0TG9jYWxlID0gdGhpcy5sb2NhbGVzW3RoaXMuZGVmYXVsdExvY2FsZV07CiAgICAgIHJldHVybiBnZXRUcmFuc2xhdGlvbih0cmFuc2xhdGlvbiwga2V5LCBmYWxzZSwgZGVmYXVsdExvY2FsZSk7CiAgICB9CiAgfSwgewogICAga2V5OiAidCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gdChrZXkpIHsKICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIHBhcmFtcyA9IG5ldyBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7CiAgICAgICAgcGFyYW1zW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTsKICAgICAgfQoKICAgICAgaWYgKCFrZXkuc3RhcnRzV2l0aChMQU5HX1BSRUZJWCkpIHJldHVybiB0aGlzLnJlcGxhY2Uoa2V5LCBwYXJhbXMpOwogICAgICByZXR1cm4gdGhpcy50cmFuc2xhdG9yLmFwcGx5KHRoaXMsIFtrZXldLmNvbmNhdChwYXJhbXMpKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJkZWZhdWx0VHJhbnNsYXRvciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZGVmYXVsdFRyYW5zbGF0b3Ioa2V5KSB7CiAgICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgcGFyYW1zID0gbmV3IEFycmF5KF9sZW4yID4gMSA/IF9sZW4yIC0gMSA6IDApLCBfa2V5MiA9IDE7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHsKICAgICAgICBwYXJhbXNbX2tleTIgLSAxXSA9IGFyZ3VtZW50c1tfa2V5Ml07CiAgICAgIH0KCiAgICAgIHJldHVybiB0aGlzLnJlcGxhY2UodGhpcy5jdXJyZW50TG9jYWxlKGtleSksIHBhcmFtcyk7CiAgICB9CiAgfSwgewogICAga2V5OiAicmVwbGFjZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVwbGFjZShzdHIsIHBhcmFtcykgewogICAgICByZXR1cm4gc3RyLnJlcGxhY2UoL1x7KFxkKylcfS9nLCBmdW5jdGlvbiAobWF0Y2gsIGluZGV4KSB7CiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi8KICAgICAgICByZXR1cm4gU3RyaW5nKHBhcmFtc1sraW5kZXhdKTsKICAgICAgfSk7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gTGFuZzsKfShTZXJ2aWNlKTsKTGFuZy5wcm9wZXJ0eSA9ICdsYW5nJzs="},{"version":3,"sources":["../../../src/services/lang/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AACA,SAAA,OAAA,QAAA,YAAA,C,CAEA;;AACA,SAAA,oBAAA,QAAA,oBAAA;AACA,SAAA,YAAA,EAAA,WAAA,QAAA,oBAAA;AASA,IAAM,WAAW,GAAjB,WAAA;AACA,IAAM,QAAQ,GAAG,MAAM,CAAvB,eAAuB,CAAvB;;AAEA,SAAA,cAAA,CAAA,MAAA,EAAA,GAAA,EAI8B;AAAA,MAD5B,YAC4B,uEAJ9B,KAI8B;AAAA,MAJ9B,aAI8B;AAE5B,MAAM,QAAQ,GAAG,GAAG,CAAH,OAAA,CAAA,WAAA,EAAjB,EAAiB,CAAjB;AACA,MAAI,WAAW,GAAG,oBAAoB,CAAA,MAAA,EAAA,QAAA,EAAtC,QAAsC,CAAtC;;AAEA,MAAI,WAAW,KAAf,QAAA,EAA8B;AAC5B,QAAA,YAAA,EAAkB;AAChB,MAAA,YAAY,6BAAZ,QAAY,8BAAZ;AACA,MAAA,WAAW,GAAX,GAAA;AAFF,KAAA,MAGO;AACL,MAAA,WAAW,6BAAX,QAAW,2CAAX;AACA,MAAA,WAAW,GAAG,cAAc,CAAA,aAAA,EAAA,GAAA,EAAA,IAAA,EAA5B,aAA4B,CAA5B;AACD;AACF;;AAED,SAAA,WAAA;AACD;;AAED,WAAM,IAAN;AAAA;;AAAA;;AAWE,gBAAA,MAAA,EAAkC;AAAA;;AAAA;;AAChC;AAPK,UAAA,aAAA,GAAA,IAAA;AAM2B,gCAO5B,MAAM,CAAC,IAAI,CAJf,QAIU,CAPsB;AAAA,QAG1B,OAH0B,yBAG1B,OAH0B;AAAA,QAG1B,OAH0B,yBAG1B,OAH0B;AAAA,QAM9B,CAN8B,yBAM9B,CAN8B;AAShC,UAAA,OAAA,GAAA,OAAA;AACA,UAAA,OAAA,GAAA,OAAA;AACA,UAAA,UAAA,GAAkB,CAAC,IAAI,MAAvB,iBAAA;AAXgC;AAYjC;;AAvBH;AAAA;AAAA,kCAyBsB,GAzBtB,EAyBmC;AAC/B,UAAM,WAAW,GAAG,KAAA,OAAA,CAAa,KAAjC,OAAoB,CAApB;AACA,UAAM,aAAa,GAAG,KAAA,OAAA,CAAa,KAAnC,aAAsB,CAAtB;AAEA,aAAO,cAAc,CAAA,WAAA,EAAA,GAAA,EAAA,KAAA,EAArB,aAAqB,CAArB;AACD;AA9BH;AAAA;AAAA,sBAgCU,GAhCV,EAgCyC;AAAA,wCAA/B,MAA+B;AAA/B,QAAA,MAA+B;AAAA;;AACrC,UAAI,CAAC,GAAG,CAAH,UAAA,CAAL,WAAK,CAAL,EAAkC,OAAO,KAAA,OAAA,CAAA,GAAA,EAAP,MAAO,CAAP;AAElC,aAAO,KAAA,UAAA,cAAA,GAAA,SAAP,MAAO,EAAP;AACD;AApCH;AAAA;AAAA,sCAsC2B,GAtC3B,EAsC0D;AAAA,yCAA/B,MAA+B;AAA/B,QAAA,MAA+B;AAAA;;AACtD,aAAO,KAAA,OAAA,CAAa,KAAA,aAAA,CAAb,GAAa,CAAb,EAAP,MAAO,CAAP;AACD;AAxCH;AAAA;AAAA,4BA0CiB,GA1CjB,EA0CiB,MA1CjB,EA0C6C;AACzC,aAAO,GAAG,CAAH,OAAA,CAAA,YAAA,EAA0B,UAAA,KAAA,EAAA,KAAA,EAAiC;AAChE;AACA,eAAO,MAAM,CAAC,MAAM,CAAC,CAArB,KAAoB,CAAP,CAAb;AAFF,OAAO,CAAP;AAID;AA/CH;;AAAA;AAAA,EAAM,OAAN;AACS,IAAA,CAAA,QAAA,GAAA,MAAA","sourcesContent":["// Extensions\nimport { Service } from '../service'\n\n// Utilities\nimport { getObjectValueByPath } from '../../util/helpers'\nimport { consoleError, consoleWarn } from '../../util/console'\n\n// Types\nimport { VuetifyPreset } from 'vuetify/types/services/presets'\nimport {\n  VuetifyLocale,\n  Lang as ILang,\n} from 'vuetify/types/services/lang'\n\nconst LANG_PREFIX = '$vuetify.'\nconst fallback = Symbol('Lang fallback')\n\nfunction getTranslation (\n  locale: VuetifyLocale,\n  key: string,\n  usingDefault = false,\n  defaultLocale: VuetifyLocale\n): string {\n  const shortKey = key.replace(LANG_PREFIX, '')\n  let translation = getObjectValueByPath(locale, shortKey, fallback) as string | typeof fallback\n\n  if (translation === fallback) {\n    if (usingDefault) {\n      consoleError(`Translation key \"${shortKey}\" not found in fallback`)\n      translation = key\n    } else {\n      consoleWarn(`Translation key \"${shortKey}\" not found, falling back to default`)\n      translation = getTranslation(defaultLocale, key, true, defaultLocale)\n    }\n  }\n\n  return translation\n}\n\nexport class Lang extends Service implements ILang {\n  static property: 'lang' = 'lang'\n\n  public current: ILang['current']\n\n  public defaultLocale = 'en'\n\n  public locales: ILang['locales']\n\n  private translator: ILang['t']\n\n  constructor (preset: VuetifyPreset) {\n    super()\n\n    const {\n      current,\n      locales,\n      t,\n    } = preset[Lang.property]\n\n    this.current = current\n    this.locales = locales\n    this.translator = t || this.defaultTranslator\n  }\n\n  public currentLocale (key: string) {\n    const translation = this.locales[this.current]\n    const defaultLocale = this.locales[this.defaultLocale]\n\n    return getTranslation(translation, key, false, defaultLocale)\n  }\n\n  public t (key: string, ...params: any[]) {\n    if (!key.startsWith(LANG_PREFIX)) return this.replace(key, params)\n\n    return this.translator(key, ...params)\n  }\n\n  private defaultTranslator (key: string, ...params: any[]) {\n    return this.replace(this.currentLocale(key), params)\n  }\n\n  private replace (str: string, params: any[]) {\n    return str.replace(/\\{(\\d+)\\}/g, (match: string, index: string) => {\n      /* istanbul ignore next */\n      return String(params[+index])\n    })\n  }\n}\n"],"sourceRoot":""}]}