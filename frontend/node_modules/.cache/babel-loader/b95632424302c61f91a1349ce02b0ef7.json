{"remainingRequest":"C:\\Users\\multicampus\\Desktop\\vue\\111111\\frontend\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\multicampus\\Desktop\\vue\\111111\\frontend\\node_modules\\vuetify\\lib\\util\\mergeData.js","dependencies":[{"path":"C:\\Users\\multicampus\\Desktop\\vue\\111111\\frontend\\node_modules\\vuetify\\lib\\util\\mergeData.js","mtime":1595868076496},{"path":"C:\\Users\\multicampus\\Desktop\\vue\\111111\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1595868068026},{"path":"C:\\Users\\multicampus\\Desktop\\vue\\111111\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":1595868067780}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["../../src/util/mergeData.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @copyright 2017 Alex Regan\n * @license MIT\n * @see https://github.com/alexsasharegan/vue-functional-data-merge\n */\n/* eslint-disable max-statements */\nimport { VNodeData } from 'vue'\nimport { camelize, wrapInArray } from './helpers'\n\nconst pattern = {\n  styleList: /;(?![^(]*\\))/g,\n  styleProp: /:(.*)/,\n} as const\n\nfunction parseStyle (style: string) {\n  const styleMap: Dictionary<any> = {}\n\n  for (const s of style.split(pattern.styleList)) {\n    let [key, val] = s.split(pattern.styleProp)\n    key = key.trim()\n    if (!key) {\n      continue\n    }\n    // May be undefined if the `key: value` pair is incomplete.\n    if (typeof val === 'string') {\n      val = val.trim()\n    }\n    styleMap[camelize(key)] = val\n  }\n\n  return styleMap\n}\n\n/**\n * Intelligently merges data for createElement.\n * Merges arguments left to right, preferring the right argument.\n * Returns new VNodeData object.\n */\nexport default function mergeData (...vNodeData: VNodeData[]): VNodeData\nexport default function mergeData (): VNodeData {\n  const mergeTarget: VNodeData & Dictionary<any> = {}\n  let i: number = arguments.length\n  let prop: string\n\n  // Allow for variadic argument length.\n  while (i--) {\n    // Iterate through the data properties and execute merge strategies\n    // Object.keys eliminates need for hasOwnProperty call\n    for (prop of Object.keys(arguments[i])) {\n      switch (prop) {\n        // Array merge strategy (array concatenation)\n        case 'class':\n        case 'directives':\n          if (arguments[i][prop]) {\n            mergeTarget[prop] = mergeClasses(mergeTarget[prop], arguments[i][prop])\n          }\n          break\n        case 'style':\n          if (arguments[i][prop]) {\n            mergeTarget[prop] = mergeStyles(mergeTarget[prop], arguments[i][prop])\n          }\n          break\n        // Space delimited string concatenation strategy\n        case 'staticClass':\n          if (!arguments[i][prop]) {\n            break\n          }\n          if (mergeTarget[prop] === undefined) {\n            mergeTarget[prop] = ''\n          }\n          if (mergeTarget[prop]) {\n            // Not an empty string, so concatenate\n            mergeTarget[prop] += ' '\n          }\n          mergeTarget[prop] += arguments[i][prop].trim()\n          break\n        // Object, the properties of which to merge via array merge strategy (array concatenation).\n        // Callback merge strategy merges callbacks to the beginning of the array,\n        // so that the last defined callback will be invoked first.\n        // This is done since to mimic how Object.assign merging\n        // uses the last given value to assign.\n        case 'on':\n        case 'nativeOn':\n          if (arguments[i][prop]) {\n            mergeTarget[prop] = mergeListeners(mergeTarget[prop], arguments[i][prop])\n          }\n          break\n        // Object merge strategy\n        case 'attrs':\n        case 'props':\n        case 'domProps':\n        case 'scopedSlots':\n        case 'staticStyle':\n        case 'hook':\n        case 'transition':\n          if (!arguments[i][prop]) {\n            break\n          }\n          if (!mergeTarget[prop]) {\n            mergeTarget[prop] = {}\n          }\n          mergeTarget[prop] = { ...arguments[i][prop], ...mergeTarget[prop] }\n          break\n        // Reassignment strategy (no merge)\n        default: // slot, key, ref, tag, show, keepAlive\n          if (!mergeTarget[prop]) {\n            mergeTarget[prop] = arguments[i][prop]\n          }\n      }\n    }\n  }\n\n  return mergeTarget\n}\n\nexport function mergeStyles (\n  target: undefined | string | object[] | object,\n  source: undefined | string | object[] | object\n) {\n  if (!target) return source\n  if (!source) return target\n\n  target = wrapInArray(typeof target === 'string' ? parseStyle(target) : target)\n\n  return (target as object[]).concat(typeof source === 'string' ? parseStyle(source) : source)\n}\n\nexport function mergeClasses (target: any, source: any) {\n  if (!source) return target\n  if (!target) return source\n\n  return target ? wrapInArray(target).concat(source) : source\n}\n\nexport function mergeListeners (\n  target: { [key: string]: Function | Function[] } | undefined,\n  source: { [key: string]: Function | Function[] } | undefined\n) {\n  if (!target) return source\n  if (!source) return target\n\n  let event: string\n\n  for (event of Object.keys(source)) {\n    // Concat function to array of functions if callback present.\n    if (target[event]) {\n      // Insert current iteration data in beginning of merged array.\n      target[event] = wrapInArray(target[event])\n      ;(target[event] as Function[]).push(...wrapInArray(source[event]))\n    } else {\n      // Straight assign.\n      target[event] = source[event]\n    }\n  }\n\n  return target\n}\n"],"sourceRoot":""}]}